#!/usr/bin/env python
import re
import argparse
import requests
import sys
import os
from os.path import expanduser

cmd = ''
for a in sys.argv:
    if re.search(r'[\s"]',a):
        cmd += " '%s'" % a
    else:
        cmd += " " + a

parser = argparse.ArgumentParser(description="Python-based Curl Replacement")
parser.add_argument("-s","--silent",help="Silent mode",action="store_true")
parser.add_argument("-k","--insecure",help="Allow insecure connections",action="store_true")
parser.add_argument("-u","--user",help="Environment variable to read for USER:PASSWORD")
parser.add_argument("-X","--request",help="Request Type")
parser.add_argument("-H","--header",help="Environment variable to read for a header",action="append")
parser.add_argument("-d","--data",help="HTTP POST data",action="append")
parser.add_argument("--data-urlencode",help="HTTP POST data",action="append")
parser.add_argument("--data-binary",help="HTTP POST data")
parser.add_argument("--globoff",help="Disable URL sequences and ranges using {} and []",action="store_true")
parser.add_argument("-F","--form",help="Specify HTTP multipart POST data",action="append")
parser.add_argument("url",nargs="?")
args = parser.parse_args()

def loader(val,require_secure=False):
    g = re.match(r'^\s*(@|\$)(.*)',val)
    if g:
        if g.group(1) == '@':
            try:
                if g.group(2) == '-':
                    return sys.stdin
                else:
                    return open(expanduser(g.group(2)),"rb")
            except:
                sys.stderr.write('curl: couldn\'t open file "%s"' % g.group(2))
                return ""
        else: # g.group(1) == '$'
            try:
                return os.environ[g.group(2)]
            except:
                sys.stderr.write('curl: couldn\'t read environment variable "%s"' % g.group(2))
                return ""
    else:
        #if require_secure:
        #    raise Exception("Credentials Exposed: "+cmd)
        return val

verify = True
if args.insecure:
    pass #verify = not args.insecure

request = "GET"
if args.request:
    request = args.request

headers = {}
if args.header:
    for arg in args.header:
        s = arg.split(":")
        if s[0] == "Authorization":
            headers[s[0]]=loader(s[1],True)
        else:
            headers[s[0]]=loader(s[1],False)

data = []

if args.data:
    for d1 in args.data:
        for d in d1.split('&'):
            g = re.match(r'(.*?)=(.*)',d)
            if g:
                data += [(g.group(1),loader(g.group(2)))]
            else:
                data += [(loader(d),'')]

if args.data_urlencode:
    for d1 in args.data_urlencode:
        for d in d1.split('&'):
            g = re.match(r'(.*?)=(.*)',d)
            if g:
                data += [(g.group(1),loader(g.group(2)))]
            else:
                data += [(loader(d),'')]

if args.data_binary:
    data = loader(args.data_binary)
    if hasattr(data,"read"):
        data = data.read()

if args.user:
    s = args.user.split(":")
    auth = (s[0],loader(s[1],True))
else:
    auth = None

form_data = {}
if args.form:
    for f in args.form:
        g = re.match(r'^(.*?)=(.*)$',f)
        if g:
            form_data[g.group(1)] = loader(g.group(2))

res = ''

if request == "GET":
    if args.user:
        res = requests.get(args.url,headers=headers,data=data,auth=auth,verify=verify)
    else:
        res = requests.get(args.url,headers=headers,data=data,verify=verify)

elif request == "POST":
    if args.user:
        res = requests.post(args.url,headers=headers,data=data,auth=auth,files=form_data,verify=verify)
    else:
        res = requests.post(args.url,headers=headers,data=data,files=form_data,verify=verify)

elif request == "DELETE":
    if args.user:
        res = requests.delete(args.url,headers=headers,data=data,auth=auth,verify=verify)
    else:
        res = requests.delete(args.url,headers=headers,data=data,verify=verify)

elif request == "PUT":
    if args.user:
        res = requests.put(args.url,headers=headers,data=data,auth=auth,verify=verify)
    else:
        res = requests.put(args.url,headers=headers,data=data,verify=verify)

else:
    raise Exception("Not supported: "+cmd)

# Python 3 issue
if type(res.text) == str:
    sys.stdout.write(res.text)
else:
    sys.stdout.write(res.text.encode('utf-8'))
